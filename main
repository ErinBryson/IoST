/*************************************************************
  
  Author:             Erin Bryson
  Date Last Modified: February 24, 2018
  
**************************************************************
  Download latest Blynk library here:
    https://github.com/blynkkk/blynk-library/releases/latest

  Blynk is a platform with iOS and Android apps to control
  Arduino, Raspberry Pi and the likes over the Internet.
  You can easily build graphic interfaces for all your
  projects by simply dragging and dropping widgets.

    Downloads, docs, tutorials: http://www.blynk.cc
    Sketch generator:           http://examples.blynk.cc
    Blynk community:            http://community.blynk.cc
    Follow us:                  http://www.fb.com/blynkapp
                                http://twitter.com/blynk_app

  Blynk library is licensed under MIT license

  This code is in public domain.

 *************************************************************

  Youâ€™ll need:
   - Blynk App (download from AppStore or Google Play)
   - Arduino 101 or compatable board
      (Adafruit Feather M0 Board used)
   - Decide how to connect to Blynk
     (USB, Ethernet, Wi-Fi, Bluetooth, ...)
   - Individually Addressable LED string compatable
     with Adafruit_Neopixel library. 
      (WS2811 LEDs used)
   - 5V Wall Adapter
      (Used to power WS2811)
   - 1x 560 Ohm 5% 1/4W Resistor
      (Can be slightly lower of higher. Used for Data
       Line.)
   - Breadboard
   - Male to Male Jumper Wires
   - 1000 uF Capacitor
      (Power Supply Noise Reduction)

  Required Equipment for Adafruit Feather M0 Board
   - 1x USB Cable - A/Micro B
   - 1x 3.3v to 5v Logic Level Shifter
  
  Optional Hardware Used
   - 2x 10K 5% 1/4W Resistors
      (Used in Safety Circuit)
   - 1x Diffused 10mm Red LED
      (5V Power Indicator: OFF)
   - 1x Diffused 10mm Green LED
      (5V Power Indicator: ON)
   - 1x Breadboard-friendly SPDT Slide Switch
      (5V Power Switch)
   - 1x FeatherWing OLED - 128x32 OLED

  There is a bunch of great example sketches included to show you how to get
  started. Think of them as LEGO bricks and combine them as you wish.
  For example, take the Ethernet Shield sketch and combine it with the
  Servo example, or choose a USB sketch and add a code from SendData
  example.
 *************************************************************
 
                *** INTENTIONAL BLANK SPACE ***
  
 *********************** MAIN PROGRAM ************************/

// Definitions
#define BLYNK_PRINT Serial
#define DATA_PIN 6          // Data pin for WS2811 LEDs
#define BRIGHTNESS 70       // Base brightness for WS2811 LEDs
#define PIXEL_COUNT 29      // Number of Pixels in strip.

#ifdef __AVR__
  #include <avr/power.h>
#endif

// Libraries
#include <SPI.h>
#include <WiFi101.h>
#include <BlynkSimpleWiFiShield101.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Parameter 1 = number of pixels in strip
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, DATA_PIN, NEO_RGB + NEO_KHZ800);

// Check hight of OLED screen
#if (SSD1306_LCDHEIGHT != 32)
 #error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

Adafruit_SSD1306 OLED_Display = Adafruit_SSD1306();

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "Insert Token Here";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Insert Network Name Here";
char pass[] = "Insert Network Password Here";

// Attach virtual serial terminal to Virtual Pin V1
WidgetTerminal terminal(V1);

// Variables to be passed from Blynk.run() to loop()
String  UserMessage;                    // String passed from Blynk string
bool    InputStringReceived = false;    // Checks to see if Blynk.run() is callled
int     stringLength = 0;               // Length of string from blynk passed

//============================== FUNCTIONS =====================================

// You can send commands from Terminal to hardware.
// Use the same Virtual Pin as your Terminal Widget
BLYNK_WRITE(V1)
{
  /*
  terminal.print("You said:");
  terminal.write(param.getBuffer(), param.getLength());
  terminal.println();
*/
  UserMessage = param.asStr();
  stringLength = param.getLength();

  InputStringReceived = true;   // Indicates that an input string was received

  // Ensure everything is sent to terminal
  //terminal.flush();
}

// Function used to switch between LED lights
void switchLights(char letter, int wait){
  switch (letter){
    case 'A':
      //Serial.println(letter);
      strip.setPixelColor(0, 255, 255, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(0, 0, 0, 0);
      strip.show();
      delay(115);
      break;
    
    case 'B':
      //Serial.println(letter);
      strip.setPixelColor(1, 0, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(1, 0, 0, 0);
      strip.show();
      delay(115);
      break;
    
    case 'C':
      //Serial.println(letter);
      strip.setPixelColor(2, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(2, 0, 0, 0);
      strip.show();
      delay(115);
      break;
      
    case 'D':
      //Serial.println(letter);
      strip.setPixelColor(3, 0, 255, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(3, 0, 0, 0);
      strip.show();
      delay(115);
      break;

    case 'E':
      //Serial.println(letter);
      strip.setPixelColor(4, 0, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(4, 0, 0, 0);
      strip.show();
      delay(115);
      break;

    case 'F':
      //Serial.println(letter);
      strip.setPixelColor(5, 255, 255, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(5, 0, 0, 0);
      strip.show();
      delay(115);
      break;

    case 'G':
      //Serial.println(letter);
      strip.setPixelColor(6, 255, 0, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(6, 0, 0, 0);
      strip.show();
      delay(115);
      break;

    case 'H':
      //Serial.println(letter);
      strip.setPixelColor(7, 50, 50, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(7, 0, 0, 0);
      strip.show();
      delay(115);
      break;

    case 'I':
      //Serial.println(letter);
      strip.setPixelColor(8, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(8, 0, 0, 0);
      strip.show();
      delay(115);
      break;      

   case 'J':
      //Serial.println(letter);
      strip.setPixelColor(9, 50, 50, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(9, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'K':
      //Serial.println(letter);
      strip.setPixelColor(10, 0, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(10, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'L':
      //Serial.println(letter);
      strip.setPixelColor(11, 255, 255, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(11, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'M':
      //Serial.println(letter);
      strip.setPixelColor(12, 255, 255, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(12, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'N':
      //Serial.println(letter);
      strip.setPixelColor(13, 255, 0, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(13, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'O':
      //Serial.println(letter);
      strip.setPixelColor(14, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(14, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'P':
      //Serial.println(letter);
      strip.setPixelColor(15, 255, 255, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(15, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'Q':
      //Serial.println(letter);
      strip.setPixelColor(16, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(16, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'R':
      //Serial.println(letter);
      strip.setPixelColor(17, 100, 100, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(17, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'S':
      //Serial.println(letter);
      strip.setPixelColor(18, 255, 255, 250);
      strip.show();
      delay(wait);
      strip.setPixelColor(18, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'T':
      //Serial.println(letter);
      strip.setPixelColor(19, 255, 255, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(19, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'U':
      //Serial.println(letter);
      strip.setPixelColor(20, 0, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(20, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'V':
      //Serial.println(letter);
      strip.setPixelColor(21, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(21, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'W':
      //Serial.println(letter);
      strip.setPixelColor(22, 0, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(22, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'X':
      //Serial.println(letter);
      strip.setPixelColor(23, 255, 255, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(23, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'Y':
      //Serial.println(letter);
      strip.setPixelColor(24, 255, 0, 0);
      strip.show();
      delay(wait);
      strip.setPixelColor(24, 0, 0, 0);
      strip.show();
      delay(115);
      break;

   case 'Z':
      //Serial.println(letter);
      strip.setPixelColor(25, 255, 0, 255);
      strip.show();
      delay(wait);
      strip.setPixelColor(25, 0, 0, 0);
      strip.show();
      delay(115);
      break;
            
    default:
      delay(wait);
      break;
  }
  delay(115);
}

void ResetOLED(){
  OLED_Display.clearDisplay();
  OLED_Display.setCursor(0, 0);
  OLED_Display.display();
}

// Adjust DelayTime relative to stringLength
void AdjustTimeDelay(int& DELAY, int& stringLength){
// Initial DELAY
  DELAY = 1000;
  switch(stringLength){
    // No reduction of DelayTime
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    // Reduce DelayTime by 250 milliseconds
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      DELAY -= 250;
      break;
    // Reduce DelayTime by 500 milliseconds
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      DELAY -= 500;
      break;
    // Reduce DelayTime by 625 milliseconds
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      DELAY -= 625;
      break;
    // Reduce DelayTime by 615 milliseconds
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      DELAY -= 615;
      break;
    // Error case: String too large
    default:
      DELAY = 0;
      break;
  }
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

//========================== SETUP PROCEDURE ===================================

void setup()
{
  //Configure pins for Adafruit ATWINC1500 Feather
  WiFi.setPins(8,7,4,2);

  // Prepare data pin for NeoPixel Output
  strip.setBrightness(BRIGHTNESS);
  strip.begin();

  for(int i = 0; i < strip.numPixels(); i++){
    strip.setPixelColor(i, 0, 0, 0);
    strip.show();
  }
  
  // Debug console
  Serial.begin(9600);
  
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  OLED_Display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)

// Show image buffer on the display hardware.
// Since the buffer is intialized with an Adafruit splashscreen
// internally, this will display the splashscreen.
  OLED_Display.display();
  delay(2000);

// Clear the buffer.
  ResetOLED();

// Set up OLED display setting
  OLED_Display.setTextSize(1);
  OLED_Display.setTextColor(WHITE);
  OLED_Display.setCursor(0, 0);

// Inform user that board is waiting for connection
  OLED_Display.println("Connection...");
  OLED_Display.display();

  Blynk.begin(auth, ssid, pass);
// You can also specify server:
//Blynk.begin(auth, ssid, pass, "blynk-cloud.com", 8442);
//Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8442);

// This will print Blynk Software version to the Terminal Widget when
// your hardware gets connected to Blynk Server
  terminal.println(F("Blynk v" BLYNK_VERSION ": Device started"));
  terminal.println(F("-------------"));
  terminal.println(F("Send messages from the Upside-Down!"));
  terminal.println(F("Type a message 26 characters or less."));
  terminal.flush();

// Clear OLED display
  ResetOLED();

// Pass IP address object
  IPAddress myIP = WiFi.localIP();

// Display network information
  OLED_Display.println("Connected to network");
  OLED_Display.print("  ");
  OLED_Display.println(ssid);
  OLED_Display.println("IP Address:");
  OLED_Display.print("  ");
  OLED_Display.println(myIP);
  OLED_Display.display();

  delay(5000);

// Clear buffer
  ResetOLED();

  delay(1000);
}

//========================== MAIN LOOP ====================================

void loop() {
  static int counter = 0;   
  int DelayTime = 1000;
  bool Error = false;
  static bool disconnected = false; // Indicates if Blynk disconnect occurs
  static bool initialRun = true;    // 

  if (initialRun){
    ResetOLED();
    OLED_Display.println("Ready for input...");
    OLED_Display.display();
    initialRun = false;
  }

  //if (Blynk.connected())
    Blynk.run();
  if (!Blynk.connected()&& !disconnected ) {
    ResetOLED();
    OLED_Display.println("Reconnecting...");
    OLED_Display.display();
    disconnected = true;
  }

// Display if Reconnected
  if (Blynk.connected() && disconnected){
    ResetOLED();
    OLED_Display.println("Reconnected!");
    OLED_Display.display();
    delay(750);
    ResetOLED();
    disconnected = false;
  }

// Standby light display options.
// Cycles through standby procedures
  if (!InputStringReceived){
    switch(counter){
      // Color Wipe Red
      case 0:
        colorWipe(strip.Color(255, 0, 0), 50);
        counter++;
        break;

      // Color Wipe Yellow
      case 1:
        colorWipe(strip.Color(255, 165, 0), 50);
        counter++;
        break;
        
      // Color Wipe Green
      case 2:
        colorWipe(strip.Color(0, 255, 0), 50);
        counter++;
        break;

      case 3:
        colorWipe(strip.Color(0, 0, 255), 50);
        counter++;
        break;

      case 4:
          rainbowCycle(5);
          counter = 0;
          break;
    }
    
    Error = true;
  }

// if input is received, continue procedure
  if (!Error){
    ResetOLED(); 

    for(int i = 0; i < strip.numPixels(); i++){
      strip.setPixelColor(i, 0, 0, 0);
      strip.show();
    }
    
    OLED_Display.println("Input received!");
    OLED_Display.display();
  
    // String preperation for function switchLights
    UserMessage.toUpperCase();  // Makes all chars in UserMessage upper-case

    AdjustTimeDelay(DelayTime, stringLength);
  }

// If string has a time delay greater than zero and
// no error occurs, continue with procedure
  if((DelayTime > 0) && (!Error)){
    OLED_Display.print("Displaying user input");
    OLED_Display.display();
  
  // Cycles through each letter of input string
    for (int i = 0; i < stringLength; i++) {
      switchLights(UserMessage[i], DelayTime);
    }

    OLED_Display.println("Display complete!");
    OLED_Display.display();

    delay(500);

    // Print String to Serial Port.
    // Used for trouble shooting.
  /*
    Serial.print(UserMessage);
    Serial.print(" ");
    Serial.print(stringLength);
    Serial.print(" ");
    Serial.println(DelayTime);

    Serial.print("Loop count: ");
    Serial.println(counter);
*/
    ResetOLED();

    InputStringReceived = false;
    //counter = 0;
    initialRun = true;
  }
  delay(500);
}
